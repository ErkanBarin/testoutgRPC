syntax = "proto3";

package Lab.Rpc.Limits.Reaction;

import "coingaming_protobuf/substance/limits/reaction/check_limit_with_counter.proto";
import "coingaming_protobuf/substance/limits/reaction/confirm_limit_amount.proto";
import "coingaming_protobuf/substance/limits/reaction/confirm_unset_limit.proto";
import "coingaming_protobuf/substance/limits/reaction/delete_limit.proto";
import "coingaming_protobuf/substance/limits/reaction/increase_counters.proto";
import "coingaming_protobuf/substance/limits/reaction/reject_limit_amount.proto";
import "coingaming_protobuf/substance/limits/reaction/reject_unset_limit.proto";
import "coingaming_protobuf/substance/limits/reaction/set_limit.proto";
import "coingaming_protobuf/substance/limits/reaction/unset_limit.proto";
import "lab_protobuf/global/context.proto";

message CheckLimitWithCounterRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.CheckLimitWithCounter.Request request = 2;
}

message ConfirmLimitAmountRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.ConfirmLimitAmount.Request request = 2;
}

message ConfirmUnsetLimitRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.ConfirmUnsetLimit.Request request = 2;
}

message DeleteLimitRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.DeleteLimit.Request request = 2;
}

message IncreaseCountersRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.IncreaseCounters.Request request = 2;
}

message RejectLimitAmountRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.RejectLimitAmount.Request request = 2;
}

message RejectUnsetLimitRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.RejectUnsetLimit.Request request = 2;
}

message SetLimitRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.SetLimit.Request request = 2;
}

message UnsetLimitRequest {
  .Lab.Global.Context context = 1;
  .Lab.Substance.Limits.Reaction.UnsetLimit.Request request = 2;
}

service Service {
  rpc CheckLimitWithCounter(CheckLimitWithCounterRequest) returns (.Lab.Substance.Limits.Reaction.CheckLimitWithCounter.Response);
  rpc ConfirmLimitAmount(ConfirmLimitAmountRequest) returns (.Lab.Substance.Limits.Reaction.ConfirmLimitAmount.Response);
  rpc ConfirmUnsetLimit(ConfirmUnsetLimitRequest) returns (.Lab.Substance.Limits.Reaction.ConfirmUnsetLimit.Response);
  rpc DeleteLimit(DeleteLimitRequest) returns (.Lab.Substance.Limits.Reaction.DeleteLimit.Response);
  rpc IncreaseCounters(IncreaseCountersRequest) returns (.Lab.Substance.Limits.Reaction.IncreaseCounters.Response);
  rpc RejectLimitAmount(RejectLimitAmountRequest) returns (.Lab.Substance.Limits.Reaction.RejectLimitAmount.Response);
  rpc RejectUnsetLimit(RejectUnsetLimitRequest) returns (.Lab.Substance.Limits.Reaction.RejectUnsetLimit.Response);
  rpc SetLimit(SetLimitRequest) returns (.Lab.Substance.Limits.Reaction.SetLimit.Response);
  rpc UnsetLimit(UnsetLimitRequest) returns (.Lab.Substance.Limits.Reaction.UnsetLimit.Response);
}
